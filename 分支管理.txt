）分支管理
	
	Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！
 	不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：
	首先，我们创建dev分支，然后切换到dev分支：

	$ git checkout -b dev
	Switched to a new branch 'dev'
	git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

	$ git branch dev
	$ git checkout dev
	然后，用git branch命令查看当前分支：

	$ git branch
	* dev
 	 master
	git branch命令会列出所有分支，当前分支前面会标一个*号。

	然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：

	Creating a new branch is quick.
	然后提交：

	$ git add readme.txt 
	$ git commit -m "branch test"
	[dev fec145a] branch test
 	1 file changed, 1 insertion(+)
	现在，dev分支的工作完成，我们就可以切换回master分支：

	$ git checkout master
	Switched to branch 'master'
	切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提	交点并没有变：
合并分支：
	1）dev分支的工作完成，我们就可以切换回master分支：
	$ git checkout master
	Switched to branch 'master'
	2）把dev分支的工作成果合并到master分支上：
	$ git merge dev
	git merge命令用于合并指定分支到当前分支。	注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
	合并完成后，就可以放心地删除dev分支了：
	准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
	我们用git log看看分支历史：
	

    $ git merge --no-ff -m "merge with no-ff" dev

	$ git branch -d dev
	Deleted branch dev (was b17d20e).
	删除后，查看branch，就只剩下master分支了：

	$ git branch
	* master
	因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。

	小结
	Git鼓励大量使用分支：

	查看分支：git branch

	创建分支：git branch <name>

	切换分支：git checkout <name>

	创建+切换分支：git checkout -b <name>

	合并某分支到当前分支：git merge <name>

	删除分支：git branch -d <name>
	
	小结
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

	解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

	用git log --graph命令可以看到分支合并图。
	
分支策略
	在实际开发中，我们应该按照几个基本原则进行分支管理：

	首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

	那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

	你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
bug分支
	并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？

	幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：

	$ git stash
	Saved working directory and index state WIP on dev: f52c633 add merge
	现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。

	首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：

	$ git checkout master
	Switched to branch 'master'
	Your branch is ahead of 'origin/master' by 6 commits.
	  (use "git push" to publish your local commits)

	$ git checkout -b issue-101
	Switched to a new branch 'issue-101'
	现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交：

	$ git add readme.txt 
	$ git commit -m "fix bug 101"
	[issue-101 4c805e2] fix bug 101
	 1 file changed, 1 insertion(+), 1 deletion(-)
	修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：

	$ git checkout master
	Switched to branch 'master'
	Your branch is ahead of 'origin/master' by 6 commits.
	  (use "git push" to publish your local commits)

	$ git merge --no-ff -m "merged bug fix 101" issue-101
	Merge made by the 'recursive' strategy.
	 readme.txt | 2 +-
	 1 file changed, 1 insertion(+), 1 deletion(-)
	太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！

	$ git checkout dev
	Switched to branch 'dev'

	$ git status
	On branch dev
	nothing to commit, working tree clean
	工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：

	$ git stash list
	stash@{0}: WIP on dev: f52c633 add merge
	工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

	一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

	另一种方式是用git stash pop，恢复的同时把stash内容也删了：

	$ git stash pop
	On branch dev
	Changes to be committed:
	  (use "git reset HEAD <file>..." to unstage)

		new file:   hello.py

	Changes not staged for commit:
	  (use "git add <file>..." to update what will be committed)
	  (use "git checkout -- <file>..." to discard changes in working directory)

		modified:   readme.txt

	Dropped refs/stash@{0} (5d677e2ee266f39ea296182fb2354265b91b3b2a)
	再用git stash list查看，就看不到任何stash内容了：

	$ git stash list
	你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：

	$ git stash apply stash@{0}
小结
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
feature分支
	软件开发中，总有无穷无尽的新的功能要不断添加进来。

	添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。

	现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。

	于是准备开发：

	$ git checkout -b feature-vulcan
	Switched to a new branch 'feature-vulcan'
	5分钟后，开发完毕：

	$ git add vulcan.py

	$ git status
	On branch feature-vulcan
	Changes to be committed:
	  (use "git reset HEAD <file>..." to unstage)

		new file:   vulcan.py

	$ git commit -m "add feature vulcan"
	[feature-vulcan 287773e] add feature vulcan
	 1 file changed, 2 insertions(+)
	 create mode 100644 vulcan.py
	切回dev，准备合并：

	$ git checkout dev
	一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。

	但是！

	就在此时，接到上级命令，因经费不足，新功能必须取消！

	虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：

	$ git branch -d feature-vulcan
	error: The branch 'feature-vulcan' is not fully merged.
	If you are sure you want to delete it, run 'git branch -D feature-vulcan'.
	销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数。。

	现在我们强行删除：

	$ git branch -D feature-vulcan
	Deleted branch feature-vulcan (was 287773e).
	终于删除成功！
多人协作开发
	当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。

	要查看远程库的信息，用git remote：

	$ git remote
	origin
	或者，用git remote -v显示更详细的信息：

	$ git remote -v
	origin  git@github.com:michaelliao/learngit.git (fetch)
	origin  git@github.com:michaelliao/learngit.git (push)
	上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。

	推送分支
	推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：

	$ git push origin master
	如果要推送其他分支，比如dev，就改成：

	$ git push origin dev
	但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？

	master分支是主分支，因此要时刻与远程同步；

	dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

	bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；

	feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
抓取分支
	多人协作时，大家都会往master和dev分支上推送各自的修改。

	现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：

	$ git clone git@github.com:michaelliao/learngit.git
	Cloning into 'learngit'...
	remote: Counting objects: 40, done.
	remote: Compressing objects: 100% (21/21), done.
	remote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0
	Receiving objects: 100% (40/40), done.
	Resolving deltas: 100% (14/14), done.
	当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用git branch命令看看：

	$ git branch
	* master
	现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：

	$ git checkout -b dev origin/dev
	现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：

	$ git add env.txt

	$ git commit -m "add env"
	[dev 7a5e5dd] add env
	 1 file changed, 1 insertion(+)
	 create mode 100644 env.txt

	$ git push origin dev
	Counting objects: 3, done.
	Delta compression using up to 4 threads.
	Compressing objects: 100% (2/2), done.
	Writing objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done.
	Total 3 (delta 0), reused 0 (delta 0)
	To github.com:michaelliao/learngit.git
	   f52c633..7a5e5dd  dev -> dev
	 你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：

	$ cat env.txt
	env

	$ git add env.txt

	$ git commit -m "add new env"
	[dev 7bd91f1] add new env
	 1 file changed, 1 insertion(+)
	 create mode 100644 env.txt

	$ git push origin dev
	To github.com:michaelliao/learngit.git
	 ! [rejected]        dev -> dev (non-fast-forward)
	error: failed to push some refs to 'git@github.com:michaelliao/learngit.git'
	hint: Updates were rejected because the tip of your current branch is behind
	hint: its remote counterpart. Integrate the remote changes (e.g.
	hint: 'git pull ...') before pushing again.
	hint: See the 'Note about fast-forwards' in 'git push --help' for details.
	推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：

	$ git pull
	There is no tracking information for the current branch.
	Please specify which branch you want to merge with.
	See git-pull(1) for details.

		git pull <remote> <branch>

	If you wish to set tracking information for this branch you can do so with:

		git branch --set-upstream-to=origin/<branch> dev
	git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：

	$ git branch --set-upstream-to=origin/dev dev
	Branch 'dev' set up to track remote branch 'dev' from 'origin'.
	再pull：

	$ git pull
	Auto-merging env.txt
	CONFLICT (add/add): Merge conflict in env.txt
	Automatic merge failed; fix conflicts and then commit the result.
	这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：

	$ git commit -m "fix env conflict"
	[dev 57c53ab] fix env conflict

	$ git push origin dev
	Counting objects: 6, done.
	Delta compression using up to 4 threads.
	Compressing objects: 100% (4/4), done.
	Writing objects: 100% (6/6), 621 bytes | 621.00 KiB/s, done.
	Total 6 (delta 0), reused 0 (delta 0)
	To github.com:michaelliao/learngit.git
	   7a5e5dd..57c53ab  dev -> dev
	 因此，多人协作的工作模式通常是这样：

	首先，可以试图用git push origin <branch-name>推送自己的修改；

	如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

	如果合并有冲突，则解决冲突，并在本地提交；

	没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

	如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

	这就是多人协作的工作模式，一旦熟悉了，就非常简单。
	
小结
	查看远程库信息，使用git remote -v；

	本地新建的分支如果不推送到远程，对其他人就是不可见的；

	从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突
rebase
	小结
	rebase操作可以把本地未push的分叉提交历史整理成直线；

	rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。
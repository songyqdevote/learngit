2018.08.30
一、git介绍
Git：分布式版本控制系统。
	Git是目前世界上最先进的分布式版本控制系统。
	集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。
	分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。
Linus编写 Linux之父 牛逼人物。
CVS及SVN都是集中式的版本控制系统	
1.git的安装

1.1 Linux系统平台
	输入git，检查系统是否安装git；
	通过命令sudo apt-get install git完成git安装。
1.2 Windows平台
	git官网下载安装，在开始菜单选Git-Git Bash出现命令行窗口
	参数设置：
	$ git config --global user.name"Your Name“
	$ git config --global user.email"Your Email"
	
2   创建版本库
	创建空目录：
	$ mkdir gitlearn
	$ cd gitlearn
	$ pwd
	pwd命令用于显示当前目录
	通过git init命令把这个目录变成Git可以管理的仓库：
	如果没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见
	pwd命令用于显示当前目录。	
第二步：
	通过git init命令把这个目录变成Git可以管理的仓库：

	$ git init
	Initialized empty Git repository in 。。。
	Reinitialized existing Git repository in C:/Users/Administrator/learngit/.git/	（之前已经初始化了）	
	使用ls-ah 命令可以查到.git目录；
2.2把文件添加到版本库
	1)、创建一个文件，一定把文件放到learngit目录下，使用git add 命令把文件添加到仓库；
	eg：git add git学习记录.txt;
	执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。
	2)、用git commit命令把文件添加到仓库；
	$ git commit -m "A gitlearn txt" 引号内容为描述内容；
	初始化一个Git仓库，使用git init命令。
	添加文件到Git仓库，分两步：
	第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	第二步，使用命令git commit，完成。
	查看状态：
	$ git status
	On branch master
	Changes not staged for commit:
	  (use "git add <file>..." to update what will be committed)
	  (use "git checkout -- <file>..." to discard changes in working directory)

			modified:   "git\345\255\246\344\271\240\350\256\260\345\275\225.txt"
			no changes added to commit (use "git add" and/or "git commit -a")
	git status命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，
	文件被修改过了，但还没有准备提交的修改。
   使用git diff 文件名 查看更改内容；
	小结
	要随时掌握工作区的状态，使用git status命令。
	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
	
	git log命令查看历史记录；git log命令显示从最近到最远的提交日志
	git log --pretty=oneline 简略形式显示；
	你看到的一大串类似1094adb...的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。
	在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，
	当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100；
	使用git reset --hard HEAD^返回上一个版本；
	也可以使用git reset --hard id恢复版本；
	使用git reflog用来记录每个版本id；
	Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
	
	小结
		现在总结一下：

		HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

		穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

		要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

3 工作区与暂存区
	每次修改都要add和commit；
        命令git checkout -- <file>可以丢弃工作区的修改：
	用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：
	前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：

	第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

	第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
	git跟踪的是修改不是文件，小结
    理解了Git是如何跟踪修改的，每次修改，如果不用git add到暂存区，那就不会加入到commit中。
	撤销：
	命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

	总之，就是让这个文件回到最近一次git commit或git add时的状态。
	cat 文件名： 查看文件内容。
	git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
	Git同样告诉我们，用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区：
	小结

	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
	删除文件：
	一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

	$ git rm test.txt
	rm 'test.txt'

	$ git commit -m "remove test.txt"
	[master d46f35e] remove test.txt
	 1 file changed, 1 deletion(-)
	 delete mode 100644 test.txt
	现在，文件就从版本库中被删除了。
	另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：

	$ git checkout -- test.txt
	git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

4 远程仓库
	本地Git仓库和GitHub仓库之间的传输是通过SSH加密的。
	创建github账户，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库；
	第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

	$ ssh-keygen -t rsa -C "youremail@example.com"
	如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

	然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
	错误：1.git remote add origin错误，提示出错信息：fatal: remote origin already exists.
	解决办法：
	1、先输入$ git remote rm origin；
	2.再输入：$ git remote add origin git@github.com:songyqdevote/learngit.git
	3、如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section 'remote.origin'. 我们需要修改gitconfig文件的内容

    4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc

    5、找到一个名为gitconfig的文件，打开它把里面的[remote "origin"]那一行删掉就好了！
	
	如果输入$ ssh -T git@github.com
    出现错误提示：Permission denied (publickey).因为新生成的key不能加入ssh就会导致连接不上github。

    解决办法如下：

    1、先输入$ ssh-agent，再输入$ ssh-add ~/.ssh/id_key，这样就可以了。

    2、如果还是不行的话，输入ssh-add ~/.ssh/id_key 命令后出现报错Could not open a connection to your authentication agent.解决方法是key用Git Gui的ssh工具生成，这样生成的时候key就直接保存在ssh中了，不需要再ssh-add命令加入了，其它的user，token等配置都用命令行来做。

    3、最好检查一下在你复制id_rsa.pub文件的内容时有没有产生多余的空格或空行，有些编辑器会帮你添加这些的。

    如果输入$ git push origin master

    提示出错信息：error:failed to push som refs to .......

    解决办法如下：

    1、先输入$ git pull origin master //先把远程服务器github上面的文件拉下来

    2、再输入$ git push origin master

    3、如果出现报错 fatal: Couldn't find remote ref master或者fatal: 'origin' does not appear to be a git repository以及fatal: Could not read from remote repository.

    4、则需要重新输入$ git remote add origingit@github.com:djqiang/gitdemo.git


    使用git在本地创建一个项目的过程

    $ makdir ~/hello-world    //创建一个项目hello-world
    $ cd ~/hello-world       //打开这个项目
    $ git init             //初始化 
    $ touch README
    $ git add README        //更新README文件
    $ git commit -m 'first commit'     //提交更新，并注释信息“first commit” 
    $ git remote add origin git@github.com:defnngj/hello-world.git     //连接远程github项目  
    $ git push -u origin master     //将本地项目更新到github项目上去

	1.异常描述：

		在git bash执行命令$ git push -u origin master出错，具体错误提示如下：

		sweeneys@DESKTOP-QN9HAJ5 MINGW64 ~/learngit (master)
		$ git push -u origin master
		To github.com:xinhuiqin/learngit.git
		 ! [rejected]        master -> master (fetch first)
		error: failed to push some refs to 'git@github.com:xinhuiqin/learngit.git'
		hint: Updates were rejected because the remote contains work that you do
		hint: not have locally. This is usually caused by another repository pushing
		hint: to the same ref. You may want to first integrate the remote changes
		hint: (e.g., 'git pull ...') before pushing again.

		hint: See the 'Note about fast-forwards' in 'git push --help' for details.

		2.问题分析

		出现错误的主要原因是github中的README.md文件不在本地代码目录中。

		3.解决方法

		（1）可以通过如下命令进行代码合并【注：pull=fetch+merge】

		            git pull --rebase origin master

		（2）再执行语句：

		         git push -u origin master

		即可完成代码上传到github。

	
	
	本地：git remote add origin git@github.com:songyqwork/gitlearn.git	
	
	克隆：从github上面克隆项目到本地
		$ git clone git@github.com:songyqdevote/Python.git
		cd Python 进入项目目录；
	
	
	SSH警告

	当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：

	The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
	RSA key fingerprint is xx.xx.xx.xx.xx.
	Are you sure you want to continue connecting (yes/no)?
	这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub	的服务器，输入yes回车即可。
	）分支管理
	
	Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！
 	不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：
	首先，我们创建dev分支，然后切换到dev分支：

	$ git checkout -b dev
	Switched to a new branch 'dev'
	git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

	$ git branch dev
	$ git checkout dev
	然后，用git branch命令查看当前分支：

	$ git branch
	* dev
 	 master
	git branch命令会列出所有分支，当前分支前面会标一个*号。

	然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：

	Creating a new branch is quick.
	然后提交：

	$ git add readme.txt 
	$ git commit -m "branch test"
	[dev fec145a] branch test
 	1 file changed, 1 insertion(+)
	现在，dev分支的工作完成，我们就可以切换回master分支：

	$ git checkout master
	Switched to branch 'master'
	切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提	交点并没有变：
合并分支：
	1）dev分支的工作完成，我们就可以切换回master分支：
	$ git checkout master
	Switched to branch 'master'
	2）把dev分支的工作成果合并到master分支上：
	$ git merge dev
	git merge命令用于合并指定分支到当前分支。	注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
	合并完成后，就可以放心地删除dev分支了：
	准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
	我们用git log看看分支历史：
	

    $ git merge --no-ff -m "merge with no-ff" dev

	$ git branch -d dev
	Deleted branch dev (was b17d20e).
	删除后，查看branch，就只剩下master分支了：

	$ git branch
	* master
	因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。

	小结
	Git鼓励大量使用分支：

	查看分支：git branch

	创建分支：git branch <name>

	切换分支：git checkout <name>

	创建+切换分支：git checkout -b <name>

	合并某分支到当前分支：git merge <name>

	删除分支：git branch -d <name>
	
	小结
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

	解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

	用git log --graph命令可以看到分支合并图。
	
分支策略
	在实际开发中，我们应该按照几个基本原则进行分支管理：

	首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

	那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

	你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
	
	

	
	

